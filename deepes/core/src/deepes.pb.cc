// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "deepes.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DeepES {

namespace {

const ::google::protobuf::Descriptor* DeepESConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeepESConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* GaussianSamplingConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GaussianSamplingConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* OptimizerConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OptimizerConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* SamplingInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SamplingInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AsyncESConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AsyncESConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_deepes_2eproto() {
  protobuf_AddDesc_deepes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "deepes.proto");
  GOOGLE_CHECK(file != NULL);
  DeepESConfig_descriptor_ = file->message_type(0);
  static const int DeepESConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeepESConfig, seed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeepESConfig, buffer_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeepESConfig, gaussian_sampling_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeepESConfig, optimizer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeepESConfig, async_es_),
  };
  DeepESConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeepESConfig_descriptor_,
      DeepESConfig::default_instance_,
      DeepESConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeepESConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeepESConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeepESConfig));
  GaussianSamplingConfig_descriptor_ = file->message_type(1);
  static const int GaussianSamplingConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GaussianSamplingConfig, std_),
  };
  GaussianSamplingConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GaussianSamplingConfig_descriptor_,
      GaussianSamplingConfig::default_instance_,
      GaussianSamplingConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GaussianSamplingConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GaussianSamplingConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GaussianSamplingConfig));
  OptimizerConfig_descriptor_ = file->message_type(2);
  static const int OptimizerConfig_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizerConfig, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizerConfig, base_lr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizerConfig, momentum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizerConfig, beta1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizerConfig, beta2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizerConfig, epsilon_),
  };
  OptimizerConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OptimizerConfig_descriptor_,
      OptimizerConfig::default_instance_,
      OptimizerConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizerConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizerConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OptimizerConfig));
  SamplingInfo_descriptor_ = file->message_type(3);
  static const int SamplingInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SamplingInfo, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SamplingInfo, model_iter_id_),
  };
  SamplingInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SamplingInfo_descriptor_,
      SamplingInfo::default_instance_,
      SamplingInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SamplingInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SamplingInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SamplingInfo));
  AsyncESConfig_descriptor_ = file->message_type(4);
  static const int AsyncESConfig_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsyncESConfig, model_warehouse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsyncESConfig, model_md5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsyncESConfig, max_to_keep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsyncESConfig, model_iter_id_),
  };
  AsyncESConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AsyncESConfig_descriptor_,
      AsyncESConfig::default_instance_,
      AsyncESConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsyncESConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsyncESConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AsyncESConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_deepes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeepESConfig_descriptor_, &DeepESConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GaussianSamplingConfig_descriptor_, &GaussianSamplingConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OptimizerConfig_descriptor_, &OptimizerConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SamplingInfo_descriptor_, &SamplingInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AsyncESConfig_descriptor_, &AsyncESConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_deepes_2eproto() {
  delete DeepESConfig::default_instance_;
  delete DeepESConfig_reflection_;
  delete GaussianSamplingConfig::default_instance_;
  delete GaussianSamplingConfig_reflection_;
  delete OptimizerConfig::default_instance_;
  delete OptimizerConfig_reflection_;
  delete SamplingInfo::default_instance_;
  delete SamplingInfo_reflection_;
  delete AsyncESConfig::default_instance_;
  delete AsyncESConfig_reflection_;
}

void protobuf_AddDesc_deepes_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014deepes.proto\022\006DeepES\"\315\001\n\014DeepESConfig\022"
    "\020\n\004seed\030\001 \001(\005:\00218\022\033\n\013buffer_size\030\002 \001(\005:\006"
    "100000\0229\n\021gaussian_sampling\030\003 \001(\0132\036.Deep"
    "ES.GaussianSamplingConfig\022*\n\toptimizer\030\004"
    " \001(\0132\027.DeepES.OptimizerConfig\022\'\n\010async_e"
    "s\030\005 \001(\0132\025.DeepES.AsyncESConfig\"(\n\026Gaussi"
    "anSamplingConfig\022\016\n\003std\030\001 \001(\002:\0011\"\225\001\n\017Opt"
    "imizerConfig\022\021\n\004type\030\001 \001(\t:\003SGD\022\026\n\007base_"
    "lr\030\002 \001(\002:\0050.001\022\025\n\010momentum\030\003 \001(\002:\0030.9\022\022"
    "\n\005beta1\030\004 \001(\002:\0030.9\022\024\n\005beta2\030\005 \001(\002:\0050.999"
    "\022\026\n\007epsilon\030\006 \001(\002:\0051e-08\"2\n\014SamplingInfo"
    "\022\013\n\003key\030\001 \003(\005\022\025\n\rmodel_iter_id\030\002 \001(\005\"\200\001\n"
    "\rAsyncESConfig\022*\n\017model_warehouse\030\001 \001(\t:"
    "\021./model_warehouse\022\021\n\tmodel_md5\030\002 \003(\t\022\026\n"
    "\013max_to_keep\030\003 \001(\005:\0015\022\030\n\rmodel_iter_id\030\004"
    " \001(\005:\0010", 607);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "deepes.proto", &protobuf_RegisterTypes);
  DeepESConfig::default_instance_ = new DeepESConfig();
  GaussianSamplingConfig::default_instance_ = new GaussianSamplingConfig();
  OptimizerConfig::default_instance_ = new OptimizerConfig();
  SamplingInfo::default_instance_ = new SamplingInfo();
  AsyncESConfig::default_instance_ = new AsyncESConfig();
  DeepESConfig::default_instance_->InitAsDefaultInstance();
  GaussianSamplingConfig::default_instance_->InitAsDefaultInstance();
  OptimizerConfig::default_instance_->InitAsDefaultInstance();
  SamplingInfo::default_instance_->InitAsDefaultInstance();
  AsyncESConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_deepes_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_deepes_2eproto {
  StaticDescriptorInitializer_deepes_2eproto() {
    protobuf_AddDesc_deepes_2eproto();
  }
} static_descriptor_initializer_deepes_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int DeepESConfig::kSeedFieldNumber;
const int DeepESConfig::kBufferSizeFieldNumber;
const int DeepESConfig::kGaussianSamplingFieldNumber;
const int DeepESConfig::kOptimizerFieldNumber;
const int DeepESConfig::kAsyncEsFieldNumber;
#endif  // !_MSC_VER

DeepESConfig::DeepESConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeepESConfig::InitAsDefaultInstance() {
  gaussian_sampling_ = const_cast< ::DeepES::GaussianSamplingConfig*>(&::DeepES::GaussianSamplingConfig::default_instance());
  optimizer_ = const_cast< ::DeepES::OptimizerConfig*>(&::DeepES::OptimizerConfig::default_instance());
  async_es_ = const_cast< ::DeepES::AsyncESConfig*>(&::DeepES::AsyncESConfig::default_instance());
}

DeepESConfig::DeepESConfig(const DeepESConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeepESConfig::SharedCtor() {
  _cached_size_ = 0;
  seed_ = 18;
  buffer_size_ = 100000;
  gaussian_sampling_ = NULL;
  optimizer_ = NULL;
  async_es_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeepESConfig::~DeepESConfig() {
  SharedDtor();
}

void DeepESConfig::SharedDtor() {
  if (this != default_instance_) {
    delete gaussian_sampling_;
    delete optimizer_;
    delete async_es_;
  }
}

void DeepESConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeepESConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeepESConfig_descriptor_;
}

const DeepESConfig& DeepESConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_deepes_2eproto();  return *default_instance_;
}

DeepESConfig* DeepESConfig::default_instance_ = NULL;

DeepESConfig* DeepESConfig::New() const {
  return new DeepESConfig;
}

void DeepESConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seed_ = 18;
    buffer_size_ = 100000;
    if (has_gaussian_sampling()) {
      if (gaussian_sampling_ != NULL) gaussian_sampling_->::DeepES::GaussianSamplingConfig::Clear();
    }
    if (has_optimizer()) {
      if (optimizer_ != NULL) optimizer_->::DeepES::OptimizerConfig::Clear();
    }
    if (has_async_es()) {
      if (async_es_ != NULL) async_es_->::DeepES::AsyncESConfig::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeepESConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seed = 1 [default = 18];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seed_)));
          set_has_seed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buffer_size;
        break;
      }
      
      // optional int32 buffer_size = 2 [default = 100000];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buffer_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buffer_size_)));
          set_has_buffer_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gaussian_sampling;
        break;
      }
      
      // optional .DeepES.GaussianSamplingConfig gaussian_sampling = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gaussian_sampling:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gaussian_sampling()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_optimizer;
        break;
      }
      
      // optional .DeepES.OptimizerConfig optimizer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_optimizer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_optimizer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_async_es;
        break;
      }
      
      // optional .DeepES.AsyncESConfig async_es = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_async_es:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_async_es()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeepESConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seed = 1 [default = 18];
  if (has_seed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seed(), output);
  }
  
  // optional int32 buffer_size = 2 [default = 100000];
  if (has_buffer_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->buffer_size(), output);
  }
  
  // optional .DeepES.GaussianSamplingConfig gaussian_sampling = 3;
  if (has_gaussian_sampling()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->gaussian_sampling(), output);
  }
  
  // optional .DeepES.OptimizerConfig optimizer = 4;
  if (has_optimizer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->optimizer(), output);
  }
  
  // optional .DeepES.AsyncESConfig async_es = 5;
  if (has_async_es()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->async_es(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeepESConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seed = 1 [default = 18];
  if (has_seed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seed(), target);
  }
  
  // optional int32 buffer_size = 2 [default = 100000];
  if (has_buffer_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->buffer_size(), target);
  }
  
  // optional .DeepES.GaussianSamplingConfig gaussian_sampling = 3;
  if (has_gaussian_sampling()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->gaussian_sampling(), target);
  }
  
  // optional .DeepES.OptimizerConfig optimizer = 4;
  if (has_optimizer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->optimizer(), target);
  }
  
  // optional .DeepES.AsyncESConfig async_es = 5;
  if (has_async_es()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->async_es(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeepESConfig::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seed = 1 [default = 18];
    if (has_seed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seed());
    }
    
    // optional int32 buffer_size = 2 [default = 100000];
    if (has_buffer_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buffer_size());
    }
    
    // optional .DeepES.GaussianSamplingConfig gaussian_sampling = 3;
    if (has_gaussian_sampling()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gaussian_sampling());
    }
    
    // optional .DeepES.OptimizerConfig optimizer = 4;
    if (has_optimizer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->optimizer());
    }
    
    // optional .DeepES.AsyncESConfig async_es = 5;
    if (has_async_es()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->async_es());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeepESConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeepESConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeepESConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeepESConfig::MergeFrom(const DeepESConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seed()) {
      set_seed(from.seed());
    }
    if (from.has_buffer_size()) {
      set_buffer_size(from.buffer_size());
    }
    if (from.has_gaussian_sampling()) {
      mutable_gaussian_sampling()->::DeepES::GaussianSamplingConfig::MergeFrom(from.gaussian_sampling());
    }
    if (from.has_optimizer()) {
      mutable_optimizer()->::DeepES::OptimizerConfig::MergeFrom(from.optimizer());
    }
    if (from.has_async_es()) {
      mutable_async_es()->::DeepES::AsyncESConfig::MergeFrom(from.async_es());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeepESConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeepESConfig::CopyFrom(const DeepESConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeepESConfig::IsInitialized() const {
  
  return true;
}

void DeepESConfig::Swap(DeepESConfig* other) {
  if (other != this) {
    std::swap(seed_, other->seed_);
    std::swap(buffer_size_, other->buffer_size_);
    std::swap(gaussian_sampling_, other->gaussian_sampling_);
    std::swap(optimizer_, other->optimizer_);
    std::swap(async_es_, other->async_es_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeepESConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeepESConfig_descriptor_;
  metadata.reflection = DeepESConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GaussianSamplingConfig::kStdFieldNumber;
#endif  // !_MSC_VER

GaussianSamplingConfig::GaussianSamplingConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GaussianSamplingConfig::InitAsDefaultInstance() {
}

GaussianSamplingConfig::GaussianSamplingConfig(const GaussianSamplingConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GaussianSamplingConfig::SharedCtor() {
  _cached_size_ = 0;
  std_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GaussianSamplingConfig::~GaussianSamplingConfig() {
  SharedDtor();
}

void GaussianSamplingConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GaussianSamplingConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GaussianSamplingConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GaussianSamplingConfig_descriptor_;
}

const GaussianSamplingConfig& GaussianSamplingConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_deepes_2eproto();  return *default_instance_;
}

GaussianSamplingConfig* GaussianSamplingConfig::default_instance_ = NULL;

GaussianSamplingConfig* GaussianSamplingConfig::New() const {
  return new GaussianSamplingConfig;
}

void GaussianSamplingConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    std_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GaussianSamplingConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float std = 1 [default = 1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &std_)));
          set_has_std();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GaussianSamplingConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float std = 1 [default = 1];
  if (has_std()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->std(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GaussianSamplingConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float std = 1 [default = 1];
  if (has_std()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->std(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GaussianSamplingConfig::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float std = 1 [default = 1];
    if (has_std()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GaussianSamplingConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GaussianSamplingConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GaussianSamplingConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GaussianSamplingConfig::MergeFrom(const GaussianSamplingConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_std()) {
      set_std(from.std());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GaussianSamplingConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GaussianSamplingConfig::CopyFrom(const GaussianSamplingConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GaussianSamplingConfig::IsInitialized() const {
  
  return true;
}

void GaussianSamplingConfig::Swap(GaussianSamplingConfig* other) {
  if (other != this) {
    std::swap(std_, other->std_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GaussianSamplingConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GaussianSamplingConfig_descriptor_;
  metadata.reflection = GaussianSamplingConfig_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string OptimizerConfig::_default_type_("SGD");
#ifndef _MSC_VER
const int OptimizerConfig::kTypeFieldNumber;
const int OptimizerConfig::kBaseLrFieldNumber;
const int OptimizerConfig::kMomentumFieldNumber;
const int OptimizerConfig::kBeta1FieldNumber;
const int OptimizerConfig::kBeta2FieldNumber;
const int OptimizerConfig::kEpsilonFieldNumber;
#endif  // !_MSC_VER

OptimizerConfig::OptimizerConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OptimizerConfig::InitAsDefaultInstance() {
}

OptimizerConfig::OptimizerConfig(const OptimizerConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OptimizerConfig::SharedCtor() {
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&_default_type_);
  base_lr_ = 0.001f;
  momentum_ = 0.9f;
  beta1_ = 0.9f;
  beta2_ = 0.999f;
  epsilon_ = 1e-08f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OptimizerConfig::~OptimizerConfig() {
  SharedDtor();
}

void OptimizerConfig::SharedDtor() {
  if (type_ != &_default_type_) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void OptimizerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OptimizerConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OptimizerConfig_descriptor_;
}

const OptimizerConfig& OptimizerConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_deepes_2eproto();  return *default_instance_;
}

OptimizerConfig* OptimizerConfig::default_instance_ = NULL;

OptimizerConfig* OptimizerConfig::New() const {
  return new OptimizerConfig;
}

void OptimizerConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_type()) {
      if (type_ != &_default_type_) {
        type_->assign(_default_type_);
      }
    }
    base_lr_ = 0.001f;
    momentum_ = 0.9f;
    beta1_ = 0.9f;
    beta2_ = 0.999f;
    epsilon_ = 1e-08f;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OptimizerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1 [default = "SGD"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_base_lr;
        break;
      }
      
      // optional float base_lr = 2 [default = 0.001];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_base_lr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &base_lr_)));
          set_has_base_lr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_momentum;
        break;
      }
      
      // optional float momentum = 3 [default = 0.9];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_momentum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &momentum_)));
          set_has_momentum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_beta1;
        break;
      }
      
      // optional float beta1 = 4 [default = 0.9];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_beta1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beta1_)));
          set_has_beta1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_beta2;
        break;
      }
      
      // optional float beta2 = 5 [default = 0.999];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_beta2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beta2_)));
          set_has_beta2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_epsilon;
        break;
      }
      
      // optional float epsilon = 6 [default = 1e-08];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_epsilon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &epsilon_)));
          set_has_epsilon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OptimizerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string type = 1 [default = "SGD"];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->type(), output);
  }
  
  // optional float base_lr = 2 [default = 0.001];
  if (has_base_lr()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->base_lr(), output);
  }
  
  // optional float momentum = 3 [default = 0.9];
  if (has_momentum()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->momentum(), output);
  }
  
  // optional float beta1 = 4 [default = 0.9];
  if (has_beta1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->beta1(), output);
  }
  
  // optional float beta2 = 5 [default = 0.999];
  if (has_beta2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->beta2(), output);
  }
  
  // optional float epsilon = 6 [default = 1e-08];
  if (has_epsilon()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->epsilon(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OptimizerConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string type = 1 [default = "SGD"];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }
  
  // optional float base_lr = 2 [default = 0.001];
  if (has_base_lr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->base_lr(), target);
  }
  
  // optional float momentum = 3 [default = 0.9];
  if (has_momentum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->momentum(), target);
  }
  
  // optional float beta1 = 4 [default = 0.9];
  if (has_beta1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->beta1(), target);
  }
  
  // optional float beta2 = 5 [default = 0.999];
  if (has_beta2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->beta2(), target);
  }
  
  // optional float epsilon = 6 [default = 1e-08];
  if (has_epsilon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->epsilon(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OptimizerConfig::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string type = 1 [default = "SGD"];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }
    
    // optional float base_lr = 2 [default = 0.001];
    if (has_base_lr()) {
      total_size += 1 + 4;
    }
    
    // optional float momentum = 3 [default = 0.9];
    if (has_momentum()) {
      total_size += 1 + 4;
    }
    
    // optional float beta1 = 4 [default = 0.9];
    if (has_beta1()) {
      total_size += 1 + 4;
    }
    
    // optional float beta2 = 5 [default = 0.999];
    if (has_beta2()) {
      total_size += 1 + 4;
    }
    
    // optional float epsilon = 6 [default = 1e-08];
    if (has_epsilon()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OptimizerConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OptimizerConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OptimizerConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OptimizerConfig::MergeFrom(const OptimizerConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_base_lr()) {
      set_base_lr(from.base_lr());
    }
    if (from.has_momentum()) {
      set_momentum(from.momentum());
    }
    if (from.has_beta1()) {
      set_beta1(from.beta1());
    }
    if (from.has_beta2()) {
      set_beta2(from.beta2());
    }
    if (from.has_epsilon()) {
      set_epsilon(from.epsilon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OptimizerConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptimizerConfig::CopyFrom(const OptimizerConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptimizerConfig::IsInitialized() const {
  
  return true;
}

void OptimizerConfig::Swap(OptimizerConfig* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(base_lr_, other->base_lr_);
    std::swap(momentum_, other->momentum_);
    std::swap(beta1_, other->beta1_);
    std::swap(beta2_, other->beta2_);
    std::swap(epsilon_, other->epsilon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OptimizerConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OptimizerConfig_descriptor_;
  metadata.reflection = OptimizerConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SamplingInfo::kKeyFieldNumber;
const int SamplingInfo::kModelIterIdFieldNumber;
#endif  // !_MSC_VER

SamplingInfo::SamplingInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SamplingInfo::InitAsDefaultInstance() {
}

SamplingInfo::SamplingInfo(const SamplingInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SamplingInfo::SharedCtor() {
  _cached_size_ = 0;
  model_iter_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SamplingInfo::~SamplingInfo() {
  SharedDtor();
}

void SamplingInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SamplingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SamplingInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SamplingInfo_descriptor_;
}

const SamplingInfo& SamplingInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_deepes_2eproto();  return *default_instance_;
}

SamplingInfo* SamplingInfo::default_instance_ = NULL;

SamplingInfo* SamplingInfo::New() const {
  return new SamplingInfo;
}

void SamplingInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    model_iter_id_ = 0;
  }
  key_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SamplingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_key())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_key())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_key;
        if (input->ExpectTag(16)) goto parse_model_iter_id;
        break;
      }
      
      // optional int32 model_iter_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_model_iter_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &model_iter_id_)));
          set_has_model_iter_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SamplingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 key = 1;
  for (int i = 0; i < this->key_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->key(i), output);
  }
  
  // optional int32 model_iter_id = 2;
  if (has_model_iter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->model_iter_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SamplingInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 key = 1;
  for (int i = 0; i < this->key_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->key(i), target);
  }
  
  // optional int32 model_iter_id = 2;
  if (has_model_iter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->model_iter_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SamplingInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 model_iter_id = 2;
    if (has_model_iter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->model_iter_id());
    }
    
  }
  // repeated int32 key = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->key_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->key(i));
    }
    total_size += 1 * this->key_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SamplingInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SamplingInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SamplingInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SamplingInfo::MergeFrom(const SamplingInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  key_.MergeFrom(from.key_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_model_iter_id()) {
      set_model_iter_id(from.model_iter_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SamplingInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SamplingInfo::CopyFrom(const SamplingInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SamplingInfo::IsInitialized() const {
  
  return true;
}

void SamplingInfo::Swap(SamplingInfo* other) {
  if (other != this) {
    key_.Swap(&other->key_);
    std::swap(model_iter_id_, other->model_iter_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SamplingInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SamplingInfo_descriptor_;
  metadata.reflection = SamplingInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string AsyncESConfig::_default_model_warehouse_("./model_warehouse");
#ifndef _MSC_VER
const int AsyncESConfig::kModelWarehouseFieldNumber;
const int AsyncESConfig::kModelMd5FieldNumber;
const int AsyncESConfig::kMaxToKeepFieldNumber;
const int AsyncESConfig::kModelIterIdFieldNumber;
#endif  // !_MSC_VER

AsyncESConfig::AsyncESConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AsyncESConfig::InitAsDefaultInstance() {
}

AsyncESConfig::AsyncESConfig(const AsyncESConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AsyncESConfig::SharedCtor() {
  _cached_size_ = 0;
  model_warehouse_ = const_cast< ::std::string*>(&_default_model_warehouse_);
  max_to_keep_ = 5;
  model_iter_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AsyncESConfig::~AsyncESConfig() {
  SharedDtor();
}

void AsyncESConfig::SharedDtor() {
  if (model_warehouse_ != &_default_model_warehouse_) {
    delete model_warehouse_;
  }
  if (this != default_instance_) {
  }
}

void AsyncESConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AsyncESConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AsyncESConfig_descriptor_;
}

const AsyncESConfig& AsyncESConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_deepes_2eproto();  return *default_instance_;
}

AsyncESConfig* AsyncESConfig::default_instance_ = NULL;

AsyncESConfig* AsyncESConfig::New() const {
  return new AsyncESConfig;
}

void AsyncESConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_model_warehouse()) {
      if (model_warehouse_ != &_default_model_warehouse_) {
        model_warehouse_->assign(_default_model_warehouse_);
      }
    }
    max_to_keep_ = 5;
    model_iter_id_ = 0;
  }
  model_md5_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AsyncESConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string model_warehouse = 1 [default = "./model_warehouse"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_warehouse()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->model_warehouse().data(), this->model_warehouse().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_model_md5;
        break;
      }
      
      // repeated string model_md5 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_model_md5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_model_md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->model_md5(0).data(), this->model_md5(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_model_md5;
        if (input->ExpectTag(24)) goto parse_max_to_keep;
        break;
      }
      
      // optional int32 max_to_keep = 3 [default = 5];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_to_keep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_to_keep_)));
          set_has_max_to_keep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_model_iter_id;
        break;
      }
      
      // optional int32 model_iter_id = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_model_iter_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &model_iter_id_)));
          set_has_model_iter_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AsyncESConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string model_warehouse = 1 [default = "./model_warehouse"];
  if (has_model_warehouse()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_warehouse().data(), this->model_warehouse().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->model_warehouse(), output);
  }
  
  // repeated string model_md5 = 2;
  for (int i = 0; i < this->model_md5_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->model_md5(i).data(), this->model_md5(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->model_md5(i), output);
  }
  
  // optional int32 max_to_keep = 3 [default = 5];
  if (has_max_to_keep()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_to_keep(), output);
  }
  
  // optional int32 model_iter_id = 4 [default = 0];
  if (has_model_iter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->model_iter_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AsyncESConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string model_warehouse = 1 [default = "./model_warehouse"];
  if (has_model_warehouse()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_warehouse().data(), this->model_warehouse().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model_warehouse(), target);
  }
  
  // repeated string model_md5 = 2;
  for (int i = 0; i < this->model_md5_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_md5(i).data(), this->model_md5(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->model_md5(i), target);
  }
  
  // optional int32 max_to_keep = 3 [default = 5];
  if (has_max_to_keep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_to_keep(), target);
  }
  
  // optional int32 model_iter_id = 4 [default = 0];
  if (has_model_iter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->model_iter_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AsyncESConfig::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string model_warehouse = 1 [default = "./model_warehouse"];
    if (has_model_warehouse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model_warehouse());
    }
    
    // optional int32 max_to_keep = 3 [default = 5];
    if (has_max_to_keep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_to_keep());
    }
    
    // optional int32 model_iter_id = 4 [default = 0];
    if (has_model_iter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->model_iter_id());
    }
    
  }
  // repeated string model_md5 = 2;
  total_size += 1 * this->model_md5_size();
  for (int i = 0; i < this->model_md5_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->model_md5(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AsyncESConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AsyncESConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AsyncESConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AsyncESConfig::MergeFrom(const AsyncESConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  model_md5_.MergeFrom(from.model_md5_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_model_warehouse()) {
      set_model_warehouse(from.model_warehouse());
    }
    if (from.has_max_to_keep()) {
      set_max_to_keep(from.max_to_keep());
    }
    if (from.has_model_iter_id()) {
      set_model_iter_id(from.model_iter_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AsyncESConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AsyncESConfig::CopyFrom(const AsyncESConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AsyncESConfig::IsInitialized() const {
  
  return true;
}

void AsyncESConfig::Swap(AsyncESConfig* other) {
  if (other != this) {
    std::swap(model_warehouse_, other->model_warehouse_);
    model_md5_.Swap(&other->model_md5_);
    std::swap(max_to_keep_, other->max_to_keep_);
    std::swap(model_iter_id_, other->model_iter_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AsyncESConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AsyncESConfig_descriptor_;
  metadata.reflection = AsyncESConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DeepES

// @@protoc_insertion_point(global_scope)
