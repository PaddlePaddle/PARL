# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, nlp-ol@baidu.com
# This file is distributed under the same license as the PARL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PARL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-18 14:23+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../EvoKit/minimal_example.rst:2
msgid "minimal example"
msgstr "入门案例"

#: ../../EvoKit/minimal_example.rst:4
msgid "``本教程的目标: 演示如何通过EvoKit库来解决经典的CartPole 问题。``"
msgstr ""

#: ../../EvoKit/minimal_example.rst:7
msgid "*本教程假定读者曾经使用过PaddlePaddle, 了解基本的进化算法迭代流程。*"
msgstr ""

#: ../../EvoKit/minimal_example.rst:10
msgid "CartPole 介绍"
msgstr ""

#: ../../EvoKit/minimal_example.rst:11
msgid ""
"CartPole又叫倒立摆。小车上放了一根杆，杆会因重力而倒下。为了不让杆倒下，我们要通过移动小车，来保持其是直立的。如下图所示。 "
"在每一个时间步，模型的输入是一个4维的向量,表示当前小车和杆的状态，模型输出的信号用于控制小车往左或者右移动。当杆没有倒下的时候，每个时间步，环境会给1分的奖励；当杆倒下后，环境不会给任何的奖励，游戏结束。"
msgstr ""

#: ../../EvoKit/minimal_example.rst:18
msgid "step1: 生成预测网络"
msgstr ""

#: ../../EvoKit/minimal_example.rst:19
msgid ""
"根据上面的环境介绍，我们需要构造一个神经网络，输入为4维的向量，输出为2维的概率分布向量（表示左/右）移动的概率。 "
"在这里，我们使用Paddle来实现预测网络，并保存到本地。"
msgstr ""

#: ../../EvoKit/minimal_example.rst:48
msgid "step2: 构造ESAgent"
msgstr ""

#: ../../EvoKit/minimal_example.rst:50
msgid "调用 ``load_config`` 加载配置文件。"
msgstr ""

#: ../../EvoKit/minimal_example.rst:51
msgid "调用 ``load_inference_model`` 函数加载模型参数。"
msgstr ""

#: ../../EvoKit/minimal_example.rst:52
msgid "调用 ``init_solver`` 初始化solver。"
msgstr ""

#: ../../EvoKit/minimal_example.rst:54
msgid "配置文件主要是用于指定进化算法类型（比如Gaussian或者CMA）,使用的optimizer类型（Adam或者SGD）。"
msgstr ""

#: ../../EvoKit/minimal_example.rst:88
msgid "step3: 生成用于采样的Agent"
msgstr ""

#: ../../EvoKit/minimal_example.rst:90
msgid "主要关注三个接口："
msgstr ""

#: ../../EvoKit/minimal_example.rst:92
msgid "调用 ``clone`` 生成一个用于sampling的agent。"
msgstr ""

#: ../../EvoKit/minimal_example.rst:93
msgid "调用 ``add_noise`` 给这个agent的参数空间增加噪声，同时返回该噪声对应的唯一信息，这个信息得记录在log中，用于线下更新。"
msgstr ""

#: ../../EvoKit/minimal_example.rst:94
msgid "调用 ``predict`` 提供预测接口。"
msgstr ""

#: ../../EvoKit/minimal_example.rst:103
msgid "step4: 用采样的数据更新模型参数"
msgstr ""

#: ../../EvoKit/minimal_example.rst:105
msgid "用户提供两组数据："
msgstr ""

#: ../../EvoKit/minimal_example.rst:107
msgid "采样参数过程中用于线下复现采样噪声的sampling_info"
msgstr ""

#: ../../EvoKit/minimal_example.rst:108
msgid "扰动参数后，新参数的评估结果"
msgstr ""

#: ../../EvoKit/minimal_example.rst:115
msgid "主代码以及注释"
msgstr ""

#: ../../EvoKit/minimal_example.rst:117
msgid "以下的代码演示通过多线程同时采样, 提升解决问题的效率。"
msgstr ""

#: ../../EvoKit/minimal_example.rst:169
msgid "如何运行demo"
msgstr ""

#: ../../EvoKit/minimal_example.rst:171
msgid "下载代码"
msgstr ""

#: ../../EvoKit/minimal_example.rst:173
msgid "在icode上clone代码，我们的仓库路径是： ``baidu/nlp/deep-es`` ``TO DO: 修改库路径``"
msgstr ""

#: ../../EvoKit/minimal_example.rst:175
msgid "编译demo"
msgstr ""

#: ../../EvoKit/minimal_example.rst:177
msgid "通过bcloud的云端集群编译即可，命令为： ``bb``"
msgstr ""

#: ../../EvoKit/minimal_example.rst:179
msgid "运行demo"
msgstr ""

#: ../../EvoKit/minimal_example.rst:181
msgid "编译完成后，我们需要增加动态库查找路径："
msgstr ""

#: ../../EvoKit/minimal_example.rst:183
msgid "``export LD_LIBRARY_PATH=./output/so/:$LD_LIBRARY_PATH``"
msgstr ""

#: ../../EvoKit/minimal_example.rst:185
msgid "运行demo： ``./output/bin/cartpole/train``"
msgstr ""

#: ../../EvoKit/minimal_example.rst:188
msgid "问题解决"
msgstr ""

#: ../../EvoKit/minimal_example.rst:190
msgid "在使用过程中有任何问题，请加hi群: 1692822 (PARL官方答疑群)进行咨询，开发同学会直接回答任何的使用问题。"
msgstr ""

#: ../../EvoKit/online_example.rst:2
msgid "Example for Online Products"
msgstr "产业级线上案例"

#: ../../EvoKit/online_example.rst:4
msgid "``本教程的目标: 演示通过EvoKit库上线后，如何迭代算法，更新模型参数。``"
msgstr ""

#: ../../EvoKit/online_example.rst:6
msgid ""
"在产品线中，线上无法实时拿到用户日志，经常是通过保存用户点击/时长日志，在线下根据用户数据更新模型，然后再推送到线上，完成算法的更新。 "
"本教程继续围绕经典的CartPole环境,展示如何通过在线采样/离线更新的方式，来更新迭代ES算法。"
msgstr ""

#: ../../EvoKit/online_example.rst:9
msgid "demo的完整代码示例放在demp/online_example文件夹中。 ``TO DO: 文件夹``"
msgstr ""

#: ../../EvoKit/online_example.rst:13
msgid "初始化solver"
msgstr ""

#: ../../EvoKit/online_example.rst:14
msgid "构造solver，对它初始化，并保存到文件。初始化solver仅需在开始时调用一次。"
msgstr ""

#: ../../EvoKit/online_example.rst:26
msgid "线上采样"
msgstr ""

#: ../../EvoKit/online_example.rst:27
msgid "加载模型和solver，记录线上采样返回的sampling_info以及评估的reward，并通过二进制的方式记录到log文件中。"
msgstr ""

#: ../../EvoKit/online_example.rst:60
msgid "线下更新"
msgstr ""

#: ../../EvoKit/online_example.rst:61
msgid ""
"在加载好之前记录的log之后，调用 ``update`` 函数进行更新，然后通过 ``save_inference_model`` 和 "
"``save_solver`` 函数保存更新后的参数到本地，推送到线上。"
msgstr ""

#: ../../EvoKit/online_example.rst:94
msgid "主代码"
msgstr ""

#: ../../EvoKit/online_example.rst:96
msgid "将以上代码分别编译成可执行文件。"
msgstr ""

#: ../../EvoKit/online_example.rst:98
msgid "初始化solver: ``init_solver`` 。"
msgstr ""

#: ../../EvoKit/online_example.rst:99
msgid "线上采样: ``online_sampling`` 。"
msgstr ""

#: ../../EvoKit/online_example.rst:100
msgid "线下更新: ``offline update`` 。"
msgstr ""

#: ../../EvoKit/overview.rst:2
msgid "Overview"
msgstr "简介"

#: ../../EvoKit/overview.rst:4
msgid "``EvoKit`` 是一个集合了多种进化算法、兼容多种类预测框架的进化算法库，主打 **快速上线验证** 。"
msgstr ""

#: ../../EvoKit/overview.rst:11
msgid "特性"
msgstr ""

#: ../../EvoKit/overview.rst:13
msgid "**1. 多种进化算法支持。** 支持高斯采样、CMA、GA等算法，更多算法持续接入中。"
msgstr ""

#: ../../EvoKit/overview.rst:15
msgid "**2. 主流优化器支持。** 支持SGD/Momentum/Adam等多个主流优化器，有效提升算法收敛效率。"
msgstr ""

#: ../../EvoKit/overview.rst:17
msgid "**3. 一站式上线。** 整合了线上采样和线下更新流程, 提供Bcloud/Cmake等编译方式, 助力快速上线。"
msgstr ""

#: ../../EvoKit/overview.rst:19
msgid "**4. 深度学习框架全系列兼容。** 裸写的网络，paddle/lego/Torch等深度学习框架，EvoKit都支持。"
msgstr ""

#: ../../EvoKit/overview.rst:21
msgid "**5. 同步/异步更新方式。** 支持多个采样模型/多份采样数据异步更新，完美契合业务场景。"
msgstr ""

