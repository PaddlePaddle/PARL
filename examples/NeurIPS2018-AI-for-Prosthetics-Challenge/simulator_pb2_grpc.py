#   Copyright (c) 2018 PaddlePaddle Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import simulator_pb2 as simulator__pb2


class SimulatorStub(object):
    """The greeting service definition.
  """

    def __init__(self, channel):
        """Constructor.

    Args:
      channel: A grpc.Channel.
    """
        self.Send = channel.unary_unary(
            '/simulator.Simulator/Send',
            request_serializer=simulator__pb2.Request.SerializeToString,
            response_deserializer=simulator__pb2.Reply.FromString,
        )


class SimulatorServicer(object):
    """The greeting service definition.
  """

    def Send(self, request, context):
        """Request Action
    """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SimulatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'Send':
        grpc.unary_unary_rpc_method_handler(
            servicer.Send,
            request_deserializer=simulator__pb2.Request.FromString,
            response_serializer=simulator__pb2.Reply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'simulator.Simulator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler, ))
